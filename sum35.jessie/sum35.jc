
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

uint32 calc(uint32 bound)
  requires (_C_18 : ((bound :> integer) <= 1000));
behavior default:
  assigns \nothing;
  ensures (_C_17 : ((\result :> integer) == 0));
{  
   (var uint32 sum);
   
   (var uint32 i);
   
   {  (_C_1 : (sum = (0 :> uint32)));
      
      {  (_C_2 : (i = (1 :> uint32)));
         
         loop 
         behavior default:
           
           assigns i,
           sum;
         variant (_C_3 : ((bound :> integer) - (i :> integer)));
         while (true)
         {  
            {  (if (_C_4 : (i < bound)) then () else 
               (goto while_0_break));
               
               {  (if (_C_10 : (! (((_C_9 : ((_C_8 : (i % (3 :> uint32))) :> uint32)) :> uint32) !=
                                    (0 :> uint32)))) then 
                  (goto _LOR) else (if (_C_7 : (! (((_C_6 : ((_C_5 : 
                                                             (i %
                                                               (5 :> uint32))) :> uint32)) :> uint32) !=
                                                    (0 :> uint32)))) then 
                                   (goto _LOR) else ()));
                  
                  (goto _LOR_0);
                  (_LOR : (_LOR : (_C_13 : (sum = (_C_12 : ((_C_11 : 
                                                            (sum +
                                                              i)) :> uint32))))));
                  (_LOR_0 : ())
               };
               (_C_16 : (i = (_C_15 : ((_C_14 : (i + (1 :> uint32))) :> uint32))))
            }
         };
         (while_0_break : ())
      };
      
      (return sum)
   }
}
